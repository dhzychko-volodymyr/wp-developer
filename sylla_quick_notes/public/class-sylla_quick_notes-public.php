<?php

/**
 * The public-facing functionality of the plugin.
 *
 * @link       https://https://www.linkedin.com/in/volodymyr-dhzychko-865348171/
 * @since      1.0.0
 *
 * @package    Sylla_quick_notes
 * @subpackage Sylla_quick_notes/public
 */

/**
 * The public-facing functionality of the plugin.
 *
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the public-facing stylesheet and JavaScript.
 *
 * @package    Sylla_quick_notes
 * @subpackage Sylla_quick_notes/public
 * @author     Volodymyr Dhzychko <dhzychko@gmail.com>
 */
class Sylla_quick_notes_Public {

	/**
	 * The ID of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $plugin_name    The ID of this plugin.
	 */
	private $plugin_name;

	/**
	 * The version of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $version    The current version of this plugin.
	 */
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.0
	 * @param      string    $plugin_name       The name of the plugin.
	 * @param      string    $version    The version of this plugin.
	 */
	public function __construct( $plugin_name, $version ) {

		$this->plugin_name = $plugin_name;
		$this->version = $version;

	}

	/**
	 * Register the stylesheets for the public-facing side of the site.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_styles() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Sylla_quick_notes_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Sylla_quick_notes_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		// Check if the site is using RTL settings
		$bootstrap_css = is_rtl() 
			? 'node_modules/bootstrap/dist/css/bootstrap.rtl.min.css' 
			: 'node_modules/bootstrap/dist/css/bootstrap.min.css';

		// Enqueue the appropriate Bootstrap CSS
		wp_enqueue_style( $this->plugin_name . '-bootstrap-css', plugins_url( $bootstrap_css, dirname(__FILE__) ), array(), '5.1.3', 'all' );

		wp_enqueue_style( $this->plugin_name . '-public', plugin_dir_url( __FILE__ ) . 'css/sylla_quick_notes-public.css', array(), $this->version, 'all' );
		

	}

	/**
	 * Register the JavaScript for the public-facing side of the site.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_scripts() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Sylla_quick_notes_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Sylla_quick_notes_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		// Enqueue Bootstrap JS from node_modules
		wp_enqueue_script( $this->plugin_name . '-bootstrap-js', plugins_url( 'node_modules/bootstrap/dist/js/bootstrap.bundle.min.js', dirname(__FILE__) ), array( 'jquery' ), '5.1.3', true );

		wp_enqueue_script( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'js/sylla_quick_notes-public.js', array( 'jquery' ), $this->version, false );

		wp_localize_script( $this->plugin_name, 'sylla_data', array(
			'ajaxurl' => admin_url( 'admin-ajax.php' ),
			'localizeDeleteNote' => esc_html__( 'Delete Note', 'sylla_quick_notes' ),
		) );

	}

	public function register_sylla_notes_shortcode() {

        add_shortcode( 'sylla_notes', array( $this, 'sylla_notes_shortcode' ) );

    }

	/**
	 * Shortcode handler for displaying quick notes.
	 *
	 * This function captures the output of the included template file
	 * and returns it as a string to be used in a shortcode.
	 *
	 * @return string The content generated by the included template file.
	 */
	public function sylla_notes_shortcode() {

		$is_user_logged_in = apply_filters( "sylla_shortcode_logged_status", is_user_logged_in() );
		if ( $is_user_logged_in ) {
			ob_start();
				do_action( 'sylla_shortcode_logged_in_before' );
				include 'partials/sylla_quick_notes-public-display.php';
				do_action( 'sylla_shortcode_logged_in_after' );
			return apply_filters( "sylla_shortcode_not_logged_in_html", ob_get_clean() );
		} else {
			return apply_filters( "sylla_shortcode_not_logged_in_html", '' );
		}

	}

	/**
	 * Handles the saving of a new note via an AJAX request.
	 *
	 * This method validates the security nonce, sanitizes the input data, 
	 * and inserts a new note into the database for the currently logged-in user.
	 * If the operation is successful, it returns a JSON success response.
	 * Otherwise, it returns a JSON error response.
	 *
	 * @return void
	 */
	public function sylla_save_new_note() {

		if ( ! isset( $_POST['sylla_security_form'] ) || ! wp_verify_nonce( $_POST['sylla_security_form'], 'sylla_security_save_note' ) ) {
			wp_send_json_error( array( 'message' => __( 'Invalid security token', 'sylla_quick_notes' ) ) );
		}

		$note_title = sanitize_text_field( $_POST['sylla_note_title'] );
		$note_content = sanitize_textarea_field( $_POST['sylla_note_content'] );
		$user_id = get_current_user_id();

		do_action( 'sylla_shortcode_create_node', $note_title, $note_content, $user_id );

		global $wpdb;
		$table_name = $wpdb->prefix . 'sylla_quick_notes';

		$wpdb->query(
			$wpdb->prepare(
				"INSERT INTO $table_name (note_title, note_content, user_id) VALUES (%s, %s, %d)",
				$note_title,
				$note_content,
				$user_id
			)
		);

		$new_note_id = $wpdb->insert_id;

		wp_send_json_success( array( 
			'message' => __( 'Note saved successfully', 'sylla_quick_notes' ),
			'note_id' => $new_note_id 
		) );

	}

	public function sylla_delete_note() {

		if ( ! isset( $_POST['sylla_security_accordeon'] ) || ! wp_verify_nonce( $_POST['sylla_security_accordeon'], 'sylla_security_delete_note' ) ) {
			wp_send_json_error( array( 'message' => __( 'Invalid security token', 'sylla_quick_notes' ) ) );
		}

		$note_id = intval( $_POST['sylla_note_id'] );

		do_action( 'sylla_shortcode_delete_node', $note_id );

		global $wpdb;
		$table_name = $wpdb->prefix . 'sylla_quick_notes';

		$wpdb->query(
			$wpdb->prepare(
				"DELETE FROM $table_name WHERE note_id = %d",
				$note_id
			)
		);

		wp_send_json_success( array( 
			'message' => __( 'Note deleted successfully', 'sylla_quick_notes' ),
			'note_id' => $note_id 
		) );

	}

}
